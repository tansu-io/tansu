---
name: ci
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  CLICOLOR: 1
jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        pg:
          - postgres:16
          - postgres:17
    env:
      ADVERTISED_LISTENER_URL: tcp://localhost:9092
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_ALLOW_HTTP: true
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ENDPOINT: http://localhost:9000
      AWS_SECRET_ACCESS_KEY: minioadmin
      CLUSTER_ID: tansu-ci
      DATA_LAKE: s3://lake
      ICEBERG_CATALOG: http://localhost:8181/catalog
      ICEBERG_WAREHOUSE: tansu
      LAKEKEEPER_IMAGE: quay.io/lakekeeper/catalog:v0.8.5
      POSTGRES_IMAGE: ${{matrix.pg}}
      PROMETHEUS_LISTENER_URL: tcp://[::]:9100
      RUST_BACKTRACE: 1
      RUST_LOG: warn
      SCHEMA_REGISTRY: file://./etc/schema
      STORAGE_ENGINE: s3://tansu/
      TANSU_IMAGE: ghcr.io/tansu-io/tansu
    steps:
      - uses: actions/checkout@v5
      - uses: extractions/setup-just@v3
      - run: just ci
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          cache: false
      - run: cargo build
      - run: cargo fmt --all --check
      - run: cargo clippy -- -D warnings
      - run: cargo test
  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: crate-ci/typos@v1.34.0
        with:
          config: typos.toml
  third-party-license:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - env:
          CARGO_ABOUT_VERSION: 0.6.6
        run: |
          cargo install "cargo-about@$CARGO_ABOUT_VERSION"
          cargo about generate about.hbs >THIRD-PARTY-LICENSE.html
      - uses: actions/upload-artifact@v4
        with:
          name: third-party-license
          path: THIRD-PARTY-LICENSE.html
          if-no-files-found: error
  src:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: |
          git archive --format=tar.gz HEAD >${{runner.temp}}/src.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: src
          path: ${{runner.temp}}/src.tar.gz
          if-no-files-found: error
  package:
    needs: [build, third-party-license, typos]
    runs-on: ${{matrix.os}}
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{env.REGISTRY}}/${{github.repository}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
      - uses: docker/login-action@v3
        with:
          registry: ${{env.REGISTRY}}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  smoke:
    needs: [package]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-24.04-arm
        storage:
          - s3://tansu/
          - postgres://postgres:postgres@db
        kafka:
          - apache/kafka:3.9.0
          - apache/kafka:3.8.1
          - apache/kafka:3.7.0
    runs-on: ${{matrix.os}}
    env:
      ADVERTISED_LISTENER_URL: tcp://tansu:9092
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_ALLOW_HTTP: true
      AWS_DEFAULT_REGION: auto
      AWS_ENDPOINT: http://minio:9000
      AWS_SECRET_ACCESS_KEY: minioadmin
      CLUSTER_ID: kafka-python-integration
      KAFKA_IMAGE: ${{matrix.kafka}}
      PROMETHEUS_LISTENER_URL: tcp://localhost:9100
      RUST_BACKTRACE: 1
      RUST_LOG: warn,tansu_broker=debug,tansu_storage=debug,tansu_schema=debug
      STORAGE_ENGINE: ${{matrix.storage}}
    steps:
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{env.REGISTRY}}/${{github.repository}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - uses: actions/checkout@v5
        with:
          repository: tansu-io/example-java
          path: integration
      - uses: actions/checkout@v5
        with:
          sparse-checkout: |
            etc/initdb.d/010-schema.sql
          sparse-checkout-cone-mode: false
          path: initdb
      - run: ls -lR
      - run: cp -v initdb/etc/initdb.d/010-schema.sql integration/etc/initdb.d
      - run: docker compose --ansi never --progress plain up --no-color --quiet-pull --detach
        working-directory: integration
        env:
          TANSU_IMAGE: ghcr.io/tansu-io/tansu:${{steps.meta.outputs.version}}
      - run: docker compose --ansi never exec minio /usr/bin/mc ready local
        working-directory: integration
        env:
          TANSU_IMAGE: ghcr.io/tansu-io/tansu:${{steps.meta.outputs.version}}
      - run: docker compose --ansi never exec minio /usr/bin/mc alias set local http://localhost:9000 ${{ env.AWS_ACCESS_KEY_ID }} ${{ env.AWS_SECRET_ACCESS_KEY }}
        working-directory: integration
        env:
          TANSU_IMAGE: ghcr.io/tansu-io/tansu:${{steps.meta.outputs.version}}
      - run: docker compose --ansi never exec minio /usr/bin/mc mb local/tansu
        working-directory: integration
        env:
          TANSU_IMAGE: ghcr.io/tansu-io/tansu:${{steps.meta.outputs.version}}
      - run: sudo apt-get update
      - run: sudo apt-get install -y bats
      - run: docker compose exec db /usr/bin/pg_isready --timeout=60
        working-directory: integration
        env:
          TANSU_IMAGE: ghcr.io/tansu-io/tansu:${{steps.meta.outputs.version}}
      - run: docker compose logs
        working-directory: integration
        env:
          TANSU_IMAGE: ghcr.io/tansu-io/tansu:${{steps.meta.outputs.version}}
      - run: bats --trace --verbose-run tests
        working-directory: integration
        env:
          TANSU_IMAGE: ghcr.io/tansu-io/tansu:${{steps.meta.outputs.version}}
  release:
    needs: [build, src, third-party-license, typos]
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            flags: "-C linker=aarch64-linux-gnu-gcc -C link-arg=-lgcc"
            enabled: false
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            flags: ""
            enabled: true
          - target: aarch64-apple-darwin
            os: macos-latest
            flags: ""
            enabled: true
          - target: x86_64-apple-darwin
            os: macos-latest
            flags: ""
            enabled: true
    steps:
      - uses: actions/checkout@v5
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false
      - uses: actions/download-artifact@v5
        with:
          path: artifacts
          merge-multiple: true
      - if: ${{matrix.os == 'macos-latest'}}
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
      - if: ${{matrix.target == 'aarch64-unknown-linux-musl'}}
        run: |
          sudo apt update
          sudo apt install -y crossbuild-essential-arm64 musl-tools zlib1g-dev libzstd-dev
          rustup target add aarch64-unknown-linux-musl
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          $(which aarch64-linux-gnu-gcc) --version
      - if: ${{matrix.target == 'x86_64-unknown-linux-musl'}}
        run: |
          sudo apt update
          sudo apt install -y musl-tools zlib1g-dev
          rustup target add x86_64-unknown-linux-musl
      - if: ${{matrix.enabled}}
        env:
          RUSTFLAGS: ${{matrix.flags}}
          TARGET: ${{matrix.target}}
        run: |
          cargo build --release --target ${{matrix.target}}
          dist=$(mktemp -d -p ${{runner.temp}})
          mkdir "$dist"/bin
          cp target/"${TARGET}"/release/tansu "$dist"/bin
          cp LICENSE "$dist"
          cp artifacts/* "$dist"
          tar --create --verbose --gzip --file=tansu-"${TARGET}".tar.gz -C "$dist" .
      - if: ${{matrix.enabled}}
        uses: actions/upload-artifact@v4
        with:
          name: tansu-${{matrix.target}}
          path: tansu-${{matrix.target}}.tar.gz
          if-no-files-found: error
