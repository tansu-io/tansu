[package]
name = "tansu-storage"
description = "Storage abstraction for PostgreSQL, libSQL and ObjectStore (S3 or memory)"
authors.workspace = true
edition.workspace = true
homepage.workspace = true
keywords.workspace = true
license.workspace = true
repository.workspace = true
version.workspace = true

include = [
    "build.rs",
    "benches/*.rs",
    "src/**/*.rs",
    "src/**/*.sql",
    "tests",
    "Cargo.toml",
    "LICENSE",
]

[features]
default = []
delta = []
dynostore = ["dep:object_store"]
iceberg = []
libsql = ["dep:libsql"]
parquet = []
postgres = ["dep:tokio-postgres", "dep:deadpool", "dep:deadpool-postgres"]
turso = ["dep:turso"]


[lints]
workspace = true

[dependencies]
async-trait.workspace = true
bytes.workspace = true
chrono.workspace = true
deadpool-postgres = { workspace = true, optional = true }
deadpool = { workspace = true, optional = true }
futures-core.workspace = true
futures-util.workspace = true
futures.workspace = true
glob.workspace = true
libsql = { workspace = true, optional = true }
object_store = { workspace = true, optional = true }
opentelemetry-semantic-conventions.workspace = true
opentelemetry.workspace = true
protobuf.workspace = true
rama.workspace = true
rand.workspace = true
regex.workspace = true
serde.workspace = true
serde_json.workspace = true
tansu-sans-io.workspace = true
tansu-schema.workspace = true
thiserror.workspace = true
tokio-postgres = { workspace = true, optional = true }
tokio.workspace = true
tracing-subscriber.workspace = true
tracing.workspace = true
turso = { workspace = true, optional = true }
url.workspace = true
uuid.workspace = true

[dev-dependencies]
assert_matches.workspace = true
criterion.workspace = true
pretty_assertions.workspace = true
tempfile.workspace = true
time.workspace = true
tracing-subscriber.workspace = true
